{"/home/travis/build/npmtest/node-npmtest-flightplan/test.js":"/* istanbul instrument in package npmtest_flightplan */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-flightplan/lib.npmtest_flightplan.js":"/* istanbul instrument in package npmtest_flightplan */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_flightplan = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_flightplan = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-flightplan/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-flightplan && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_flightplan */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_flightplan\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_flightplan.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_flightplan.rollup.js'] =\n            local.assetsDict['/assets.npmtest_flightplan.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_flightplan.__dirname +\n                    '/lib.npmtest_flightplan.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-flightplan/node_modules/flightplan/index.js":"module.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-flightplan/node_modules/flightplan/lib/index.js":"var format = require('util').format\n  , extend = require('util-extend')\n  , Fiber = require('fibers')\n  , Future = require('fibers/future')\n  , logger = require('./logger')()\n  , errors = require('./errors')\n  , flight = require('./flight')\n  , prettyTime = require('pretty-hrtime')\n  , chalk = require('chalk');\n\nvar DEFAULT_TASK = 'default';\n\nfunction _setupFlight(type, tasksOrFn, fn) {\n  var tasks;\n\n  if(typeof tasksOrFn === 'string') {\n    tasks = [tasksOrFn];\n  } else if(Array.isArray(tasksOrFn)) {\n    tasks = tasksOrFn;\n  } else {\n    tasks = [DEFAULT_TASK];\n    fn = tasksOrFn;\n  }\n\n  return { type: type, tasks: tasks, fn: fn };\n}\n\n/**\n * A flightplan is a set of subsequent flights to be executed on one or more\n * hosts. Configuration is handled with the `target()` method.\n *\n * ```javascript\n * var plan = require('flightplan');\n * ```\n *\n * ### Flights\n * A flight is a set of commands to be executed on one or more hosts. There are\n * two types of flights:\n *\n * #### Local flights\n *\n * Commands in local flights are executed on the **localhost**.\n *\n * ```javascript\n * plan.local(function(transport) {\n *   transport.hostname(); // prints the hostname of localhost\n * });\n * ```\n *\n * #### Remote flights\n *\n * Commands in remote flights are executed in **parallel** against remote hosts.\n *\n * ```javascript\n * plan.remote(function(transport) {\n *   transport.hostname(); // prints the hostname(s) of the remote host(s)\n * });\n * ```\n *\n * You can define multiple flights of each type. They will be executed in the\n * order of their definition. If a previous flight failed, all subsequent\n * flights won't get executed. For more information about what it means for\n * a flight to fail, see the section about `Transport`.\n *\n * ```javascript\n * // executed first\n * plan.local(function(transport) {});\n *\n * // executed if first flight succeeded\n * plan.remote(function(transport) {});\n *\n * // executed if second flight succeeded\n * plan.local(function(transport) {});\n *\n * // ...\n * ```\n *\n * ### Tasks\n * Flightplan supports optional tasks to run a subset of flights.\n *\n * ```javascript\n * // fly deploy:<target>\n * plan.local('deploy', function(transport) {});\n *\n * // fly build:<target>\n * plan.local('build', function(transport) {});\n *\n * // fly deploy:<target> or...\n * // fly build:<target>\n * plan.local(['deploy', 'build'], function(transport) {});\n * plan.remote(['deploy', 'build'], function(transport) {});\n * ```\n *\n * If no task is specified it's implicitly set to \"default\". Therefore,\n * `fly <target>` is the same as `fly default:<target>`.\n *\n * ```javascript\n * // fly <target>\n * plan.local(function(transport) {});\n * // is the same as...\n * plan.local('default', function(transport) {});\n * // \"default\" + other tasks:\n * plan.remote(['default', 'deploy', 'build'], function(transport) {});\n * ```\n *\n * @class Flightplan\n * @return {Object} flightplan\n */\nfunction Flightplan() {\n  this._targets = {};\n  this._flights = [];\n\n  this.runtime = Object.freeze({});\n\n  process.on('SIGINT', function() {\n    throw new errors.ProcessInterruptedError('Flightplan was interrupted');\n  });\n\n  process.on('uncaughtException', function(err) {\n    logger.error(err instanceof errors.BaseError ? err.message : err.stack);\n\n    process.exit(1);\n  });\n}\n\n/**\n * Configure the flightplan's targets with `target()`. Without a\n * proper setup you can't do remote flights which require at\n * least one remote host. Each target consists of one or more hosts.\n *\n * Values in the hosts section are passed directly to the `connect()`\n * method of [mscdex/ssh2](https://github.com/mscdex/ssh2#connection-methods)\n * with one exception: `privateKey` needs to be passed as a string\n * containing the path to the keyfile instead of the key itself.\n *\n * ```javascript\n * // run with `fly staging`\n * plan.target('staging', {\n *   // see: https://github.com/mscdex/ssh2#connection-methods\n *   host: 'staging.example.com',\n *   username: 'pstadler',\n *   agent: process.env.SSH_AUTH_SOCK\n * });\n *\n * // run with `fly production`\n * plan.target('production', [\n *   {\n *     host: 'www1.example.com',\n *     username: 'pstadler',\n *     agent: process.env.SSH_AUTH_SOCK\n *   },\n *   {\n *     host: 'www2.example.com',\n *     username: 'pstadler',\n *     agent: process.env.SSH_AUTH_SOCK\n *   }\n * ]);\n *\n * // run with `fly dynamic-hosts`\n * plan.target('dynamic-hosts', function(done, runtime) {\n *   var AWS = require('aws-sdk');\n *   AWS.config.update({accessKeyId: '...', secretAccessKey: '...'});\n *   var ec2 = new AWS.EC2();\n *   var params = {Filters: [{Name: 'instance-state-name', Values: ['running']}]};\n *   ec2.describeInstances(params, function(err, response) {\n *     if(err) {\n *       return done(err);\n *     }\n *     var hosts = [];\n *     response.data.Reservations.forEach(function(reservation) {\n *       reservation.Instances.forEach(function(instance) {\n *         hosts.push({\n *           host: instance.PublicIpAddress,\n *           username: 'pstadler',\n *           agent: process.env.SSH_AUTH_SOCK\n *         });\n *       });\n *     });\n *     done(hosts);\n *   });\n * });\n * ```\n *\n * Usually flightplan will abort when a host is not reachable or authentication\n * fails. This can be prevented by setting a property `failsafe` to `true` on\n * any of the host configurations:\n *\n * ```javascript\n * plan.target('production', [\n *   {\n *     host: 'www1.example.com',\n *     username: 'pstadler',\n *     agent: process.env.SSH_AUTH_SOCK\n *   },\n *   {\n *     host: 'www2.example.com',\n *     username: 'pstadler',\n *     agent: process.env.SSH_AUTH_SOCK,\n *     failsafe: true // continue flightplan even if connection to www2 fails\n *   }\n * ]);\n * ```\n *\n *\n * You can override the `username` value of hosts by calling `fly` with\n * the `-u|--username` option:\n *\n * ```bash\n * fly production --username=admin\n * ```\n *\n * #### Configuring remote hosts during runtime (e.g. using AWS/EC2)\n *\n * Instead of having a static hosts configuration for a target you can configure\n * it on the fly by passing a function `fn(done)` as the second argument to\n * `target()`.\n *\n * This function is exectued at the very beginning. Whatever is passed to\n * `done()` will be used for connecting to remote hosts. This can either be an\n * object or an array of objects depending on if you want to connect to one or\n * multiple hosts. Passing an `Error` object will immediately abort the current\n * flightplan.\n *\n * ```javascript\n * plan.target('dynamic-hosts', function(done, runtime) {\n *   var AWS = require('aws-sdk');\n *   AWS.config.update({accessKeyId: '...', secretAccessKey: '...'});\n *   var ec2 = new AWS.EC2();\n *   var params = {Filters: [{Name: 'instance-state-name', Values: ['running']}]};\n *   ec2.describeInstances(params, function(err, response) {\n *     if(err) {\n *       return done(err);\n *     }\n *     var hosts = [];\n *     response.data.Reservations.forEach(function(reservation) {\n *       reservation.Instances.forEach(function(instance) {\n *         hosts.push({\n *           host: instance.PublicIpAddress,\n *           username: 'pstadler',\n *           agent: process.env.SSH_AUTH_SOCK\n *         });\n *       });\n *     });\n *     done(hosts);\n *   });\n * });\n * ```\n *\n * #### Defining and using properties depending on the target\n *\n * `target()` takes an optional third argument to define properties used by\n * this target. Values defined in this way can be accessed during runtime.\n *\n * ```javascript\n * plan.target('staging', {...}, {\n *   webRoot: '/usr/local/www',\n *   sudoUser: 'www'\n * });\n *\n * plan.target('production', {...}, {\n *   webRoot: '/home/node',\n *   sudoUser: 'node'\n * });\n *\n * plan.remote(function(remote) {\n *   var webRoot = plan.runtime.options.webRoot;   // fly staging -> '/usr/local/www'\n *   var sudoUser = plan.runtime.options.sudoUser; // fly staging -> 'www'\n *   remote.sudo('ls -al ' + webRoot, {user: sudoUser});\n * });\n * ```\n *\n * Properties can be set and overwritten by passing them as named options to the\n *  `fly` command.\n *\n * ```bash\n * $ fly staging --sudoUser=foo\n * # plan.runtime.options.sudoUser -> 'foo'\n * ```\n *\n * @method target(name, hosts[, options])\n * @return {Object} this\n */\nFlightplan.prototype.target = function(name, hosts, options) {\n  if(!Array.isArray(hosts) && typeof hosts === 'object') {\n    hosts = extend({}, hosts); // dereference object\n  }\n\n  this._targets[name] = { hosts: hosts, options: extend({}, options) };\n\n  return this;\n};\n\n/**\n * Calling this method registers a local flight. Local flights are\n * executed on your localhost. When `fn` gets called a `Transport` object\n * is passed with the first argument.\n *\n * ```javascript\n * plan.local(function(local) {\n *   local.echo('hello from your localhost.');\n * });\n * ```\n *\n * An optional first parameter of type Array or String can be passed for\n * defining the flight's task(s).\n *\n * @method local([tasks, ]fn)\n * @return {Object} this\n */\nFlightplan.prototype.local = function(tasksOrFn, fn) {\n  this._flights.push(_setupFlight(flight.TYPE.LOCAL, tasksOrFn, fn));\n\n  return this;\n};\n\n/**\n * Register a remote flight. Remote flights are executed on the current\n * target's remote hosts defined with `target()`. When `fn` gets called\n * a `Transport` object is passed with the first argument.\n *\n * ```javascript\n * plan.remote(function(remote) {\n *   remote.echo('hello from the remote host.');\n * });\n * ```\n *\n * An optional first parameter of type Array or String can be passed for\n * defining the flight's task(s).\n *\n * @method remote([tasks, ]fn)\n * @return {Object} this\n */\nFlightplan.prototype.remote = function(tasksOrFn, fn) {\n  this._flights.push(_setupFlight(flight.TYPE.REMOTE, tasksOrFn, fn));\n\n  return this;\n};\n\nFlightplan.prototype.run = function(task, target, options) {\n  task = task || DEFAULT_TASK;\n  options = options || {};\n\n  if(options.color !== undefined) {\n    chalk.enabled = options.color;\n  }\n\n  if(!target) {\n    throw new errors.InvalidTargetError('No target specified');\n  }\n\n  if(Object.keys(this._targets).indexOf(target) === -1) {\n    throw new errors.InvalidTargetError(\n                format(\"'%s' is not a valid target\", target));\n  }\n\n  // Filter flights to be executed\n  var flights = this._flights.filter(function(f) {\n    return f.tasks.indexOf(task) !== -1;\n  });\n\n  if(flights.length === 0) {\n    logger.warn(format(\"There is no work to be done for task '%s'\", task));\n\n    process.exit(1);\n    return; // for testing\n  }\n\n  var config = extend({}, this._targets[target]);\n\n  var context = {\n    options: extend(config.options, options),\n    target: target,\n    task: task\n  };\n\n  logger.info(format('Running %s:%s', task, target));\n\n  var self = this;\n\n  new Fiber(function() {\n    if(config.hosts) {\n      // late configuration\n      if(typeof config.hosts === 'function') {\n        var dynamicHosts = function() {\n          var future = new Future();\n\n          config.hosts(function(result) {\n            future.return(result);\n          }, context);\n\n          return future;\n        };\n\n        logger.info('Running dynamic hosts configuration');\n\n        var result = dynamicHosts().wait();\n\n        if(result instanceof Error) {\n          self.abort(result);\n        }\n\n        config.hosts = result;\n        // FIXME: Debug flag is not set at this time\n        // logger.debug(format('Hosts are set to %s', config.hosts));\n      }\n\n      if(!Array.isArray(config.hosts)) {\n        config.hosts = [config.hosts];\n      }\n\n      context.hosts = config.hosts.map(function(host) {\n        if(options.username) {\n          host.username = options.username;\n        }\n\n        return host;\n      });\n    }\n\n    self.runtime = Object.freeze(extend({}, context));\n\n    // Execute flights\n    var t = process.hrtime();\n\n    flights.forEach(function(f) {\n      flight.run(f.type, f.fn, context);\n    });\n\n    flight.disconnect();\n\n    logger.info('Flightplan finished after ' + prettyTime(process.hrtime(t)));\n  }).run();\n};\n\n/**\n * Manually abort the current flightplan and prevent any further commands and\n * flights from being executed. An optional message can be passed which\n * is displayed after the flight has been aborted.\n *\n * ```javascript\n * plan.abort('Severe turbulences over the atlantic ocean!');\n * ```\n *\n * @method abort([message])\n */\nFlightplan.prototype.abort = function(message) {\n  throw new errors.AbortedError(message || 'Flightplan aborted');\n};\n\nFlightplan.prototype.availableTargets = function() {\n  return Object.keys(this._targets);\n};\n\nFlightplan.prototype.availableTasks = function() {\n  return this._flights.reduce(function(result, f) {\n    f.tasks.forEach(function(task) {\n      if(result.indexOf(task) === -1) {\n        result.push(task);\n      }\n    });\n\n    return result;\n  }, []);\n};\n\nvar instance = new Flightplan();\nmodule.exports = instance;\n","/home/travis/build/npmtest/node-npmtest-flightplan/node_modules/flightplan/lib/logger/index.js":"var chalk = require('chalk');\n\nfunction Logger(options) {\n  options = options || {};\n  var debug  = options.debug  || false;\n  var prefix = options.prefix || '';\n\n  var printPrefix = !prefix\n    ? function() {}\n    : function() { process.stdout.write(chalk.gray(prefix) + ' '); };\n\n  this._log = function(message) {\n    printPrefix();\n    process.stdout.write(message.trim() + '\\n');\n  };\n\n  if(debug) {\n    var self = this;\n    this.debug = function(message) {\n      self._log(chalk.cyan(message));\n    };\n  }\n}\n\nLogger.prototype.user = function(message) {\n  this._log(chalk.cyan(message));\n};\n\nLogger.prototype.info = function(message) {\n  this._log(chalk.magenta('✈ ' + message));\n};\n\nLogger.prototype.success = function(message) {\n  this._log(chalk.green('● ' + message));\n};\n\nLogger.prototype.warn = function(message) {\n  this._log(chalk.yellow('● ' + message));\n};\n\nLogger.prototype.error = function(message) {\n  this._log(chalk.red('● ' + message));\n};\n\nLogger.prototype.command = function(message) {\n  this._log(chalk.blue('$ ' + message));\n};\n\nLogger.prototype.stdout = function(message) {\n  this._log(chalk.gray('> ') + message);\n};\n\nLogger.prototype.stdwarn = function(message) {\n  this._log(chalk.yellow('> ') + message);\n};\n\nLogger.prototype.stderr = function(message) {\n  this._log(chalk.red('> ') + message);\n};\n\nLogger.prototype.debug = function() {};\n\nmodule.exports = function(options) {\n  return new Logger(options);\n};\n","/home/travis/build/npmtest/node-npmtest-flightplan/node_modules/flightplan/lib/errors.js":"var util = require('util');\n\nfunction BaseError(message) {\n  BaseError.super_.call(this, message);\n  Error.captureStackTrace(this, this.constructor);\n  this.message = message;\n  this.name = this.constructor.name;\n}\nutil.inherits(BaseError, Error);\n\nfunction InvalidTargetError(message) {\n  InvalidTargetError.super_.call(this, message);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n}\nutil.inherits(InvalidTargetError, BaseError);\n\nfunction CommandExitedAbnormallyError(message) {\n  CommandExitedAbnormallyError.super_.call(this, message);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n}\nutil.inherits(CommandExitedAbnormallyError, BaseError);\n\nfunction ConnectionFailedError(message) {\n  ConnectionFailedError.super_.call(this, message);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n}\nutil.inherits(ConnectionFailedError, BaseError);\n\nfunction InvalidArgumentError(message) {\n  InvalidArgumentError.super_.call(this, message);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n}\nutil.inherits(InvalidArgumentError, BaseError);\n\nfunction AbortedError(message) {\n  AbortedError.super_.call(this, message);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n}\nutil.inherits(AbortedError, BaseError);\n\nfunction ProcessInterruptedError(message) {\n  ProcessInterruptedError.super_.call(this, message);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n}\nutil.inherits(ProcessInterruptedError, BaseError);\n\nmodule.exports = {\n  BaseError: BaseError,\n  InvalidTargetError: InvalidTargetError,\n  CommandExitedAbnormallyError: CommandExitedAbnormallyError,\n  ConnectionFailedError: ConnectionFailedError,\n  InvalidArgumentError: InvalidArgumentError,\n  AbortedError: AbortedError,\n  ProcessInterruptedError: ProcessInterruptedError\n};\n","/home/travis/build/npmtest/node-npmtest-flightplan/node_modules/flightplan/lib/flight/index.js":"var local = require('./local')\n  , remote = require('./remote');\n\nvar TYPE = Object.freeze({\n  LOCAL: 1,\n  REMOTE: 2\n});\n\nexports.TYPE = TYPE;\n\nexports.run = function(type, fn, context) {\n  switch(type) {\n    case TYPE.LOCAL:\n      local.run(fn, context);\n      break;\n\n    case TYPE.REMOTE:\n      remote.run(fn, context);\n      break;\n  }\n};\n\nexports.disconnect = function() {\n  remote.disconnect();\n};","/home/travis/build/npmtest/node-npmtest-flightplan/node_modules/flightplan/lib/flight/local.js":"var extend = require('util-extend')\n  , Fiber = require('fibers')\n  , Future = require('fibers/future')\n  , Shell = require('../transport/shell')\n  , logger = require('../logger')()\n  , prettyTime = require('pretty-hrtime');\n\nexports.run = function(fn, context) {\n  var _context = extend({}, context);\n  _context.remote = { host: 'localhost' };\n\n  var future = new Future();\n\n  var task = function() {\n    var transport = new Shell(_context);\n\n    new Fiber(function() {\n      fn(transport);\n      return future.return();\n    }).run();\n\n    return future;\n  };\n\n  var t = process.hrtime();\n\n  logger.info('Executing local task');\n\n  Future.wait(task());\n\n  logger.info('Local task finished after ' + prettyTime(process.hrtime(t)));\n};","/home/travis/build/npmtest/node-npmtest-flightplan/node_modules/flightplan/lib/transport/shell.js":"var util = require('util')\n  , extend = require('util-extend')\n  , exec = require('child_process').exec\n  , byline = require('byline')\n  , fs = require('fs')\n  , writeTempFile = require('../utils').writeTempFile\n  , Fiber = require('fibers')\n  , Future = require('fibers/future')\n  , Transport = require('./index')\n  , errors = require('../errors');\n\nfunction Shell(context) {\n  Shell.super_.call(this, context);\n}\nutil.inherits(Shell, Transport);\n\nShell.prototype._exec = function(command, options) {\n  options = options || {};\n\n  var self = this;\n\n  options = extend(extend({}, self._options), options); // clone and extend\n\n  var result = {\n    code: 0,\n    stdout: null,\n    stderr: null\n  };\n\n  self._logger.command(command);\n\n  var fiber = Fiber.current;\n\n  var proc = exec(command, extend({ maxBuffer: 1000 * 1024 }, options.exec));\n\n  proc.stdout.on('data', function(data) {\n    result.stdout = (result.stdout || '') + data;\n  });\n\n  proc.stderr.on('data', function(data) {\n    result.stderr = (result.stderr || '') + data;\n  });\n\n  byline(proc.stdout).on('data', function(data) {\n    if(!options.silent) {\n      self._logger.stdout(String(data).trim());\n    }\n  });\n\n  byline(proc.stderr).on('data', function(data) {\n    self._logger[options.failsafe ? 'stdwarn' : 'stderr'](String(data));\n  });\n\n  proc.on('close', function(code) {\n    result.code = code;\n\n    if(result.code === 0) {\n      self._logger.success('ok');\n    } else if(options.failsafe) {\n      self._logger.warn('failed safely (' + result.code + ')');\n    } else {\n      self._logger.error('failed (' + result.code + ')');\n\n      var error = new errors.CommandExitedAbnormallyError(\n                  'Command exited abnormally on ' + self._context.remote.host);\n\n      return fiber.throwInto(error);\n    }\n\n    fiber.run(result);\n  });\n\n  return Fiber.yield();\n};\n\nShell.prototype.transfer = function(files, remoteDir, options) {\n  options = extend(extend({}, this._options), options); // clone and extend\n\n  if(!remoteDir) {\n    throw new errors.InvalidArgumentError('Missing remote path for transfer()');\n  }\n\n  if(Array.isArray(files)) {\n    files = files.join('\\n');\n  } else if(files instanceof Object) {\n    if(!files.hasOwnProperty('stdout')) {\n      throw new errors.InvalidArgumentError('Invalid object passed to transfer()');\n    }\n\n    files = files.stdout;\n  }\n\n  files = (files || '').trim().replace(/[\\r|\\0]/mg, '\\n');\n\n  if(!files) {\n    throw new errors.InvalidArgumentError('Empty file list passed to transfer()');\n  }\n\n  var tmpFile = writeTempFile(files);\n\n  var rsyncFlags = '-az' + (this._context.options.debug ? 'vv' : '');\n  var results = [];\n\n  var self = this;\n\n  var task = function(remote) {\n    var sshFlags = (remote.privateKey ? ' -i ' + remote.privateKey : '');\n    var remoteUrl = util.format('%s%s:%s',\n                              (remote.username ? remote.username + '@' : ''),\n                              remote.host, remoteDir);\n\n    var command = util.format('rsync --files-from %s %s --rsh=\"ssh -p%s%s\" ./ %s',\n                              tmpFile, rsyncFlags,\n                              remote.port || 22, sshFlags, remoteUrl);\n\n    var future = new Future();\n\n    new Fiber(function() {\n      results.push(self.exec(command, options));\n\n      return future.return();\n    }).run();\n\n    return future;\n  };\n\n  var tasks = [];\n  self._context.hosts.forEach(function(remote) {\n    tasks.push(task(remote));\n  });\n\n  Future.wait(tasks);\n\n  fs.unlink(tmpFile);\n\n  return results;\n};\n\nmodule.exports = Shell;\n","/home/travis/build/npmtest/node-npmtest-flightplan/node_modules/flightplan/lib/utils/index.js":"var fs = require('fs')\n  , os = require('os')\n  , tmpdir = os.tmpdir()\n  , path = require('path')\n  , crypto = require('crypto');\n\nfunction tempFilePath(filepath) {\n  return path.join(filepath || tmpdir, crypto.randomBytes(16).toString('hex'));\n}\n\nexports.writeTempFile = function(str) {\n  var isWin = /^win/i.test(os.platform());\n  var fullpath = isWin ? tempFilePath('.') : tempFilePath();\n\n  fs.writeFileSync(fullpath, str);\n\n  return fullpath;\n};\n\nexports.escapeSingleQuotes = function(str) {\n  if(!str) {\n    return str;\n  }\n\n  return str.replace(/'/g, \"'\\\\''\");\n};\n","/home/travis/build/npmtest/node-npmtest-flightplan/node_modules/flightplan/lib/transport/index.js":"var format = require('util').format\n  , extend = require('util-extend')\n  , Future = require('fibers/future')\n  , prompt = require('prompt')\n  , chalk = require('chalk')\n  , logger = require('../logger')\n  , errors = require('../errors')\n  , commands = require('./commands')\n  , queue = require('../utils/queue')\n  , escapeSingleQuotes = require('../utils').escapeSingleQuotes;\n\n/**\n * A transport is the interface you use during flights. Basically they\n * offer you a set of methods to execute a chain of commands. Depending on the\n * type of flight, this is either a `Shell` object for local\n * flights, or an `SSH` for remote flights. Both transports\n * expose the same set of methods as described in this section.\n *\n * ```javascript\n * plan.local(function(local) {\n *   local.echo('Shell.echo() called');\n * });\n *\n * plan.remote(function(remote) {\n *   remote.echo('SSH.echo() called');\n * });\n * ```\n *\n * We call the Transport object `transport` in the following section to avoid\n * confusion. However, do yourself a favor and use `local` for local, and\n * `remote` for remote flights.\n *\n * #### Accessing runtime information\n *\n * Flightplan provides information during flights with the `runtime` properties:\n *\n * ```javascript\n * plan.remote(function(transport) { // applies to local flights as well\n *   // Flightplan specific information\n *   console.log(plan.runtime.task);    // 'default'\n *   console.log(plan.runtime.target);  // 'production'\n *   console.log(plan.runtime.hosts);   // [{ host: 'www1.example.com', port: 22 }, ...]\n *   console.log(plan.runtime.options); // { debug: true, ... }\n *\n *   // Flight specific information\n *   console.log(transport.runtime); // { host: 'www1.example.com', port: 22 }\n * });\n * ```\n *\n * @class Transport\n * @return {Object} transport\n */\nfunction Transport(context) {\n  this._context = context;\n  this._options = {\n    silent: false,\n    failsafe: false\n  };\n  this._execWith = '';\n\n  this._logger = logger({\n    debug: this._context.options.debug,\n    prefix: this._context.remote.host\n  });\n\n  this.runtime = Object.freeze(extend({}, this._context.remote)); // userland\n\n  commands.forEach(function(command) {\n    this[command] = function(args, options) {\n      if(typeof args === 'object') {\n        options = args;\n        args = null;\n      }\n\n      var _command = format('%s%s', this._execWith, command);\n      _command = args ? format('%s %s', _command, args) : _command;\n\n      return this._exec(_command, options || {});\n    };\n  }, this);\n}\n\nTransport.prototype._exec = function() {\n  throw new Error('This transport does not implement `_exec(command, options)`');\n};\n\n/**\n * To execute a command you have the choice between using `exec()` or one\n * of the handy wrappers for often used commands:\n * `transport.exec('ls -al')` is the same as `transport.ls('-al')`. If a\n * command returns a non-zero exit code, the flightplan will be aborted and\n * all subsequent commands and flights won't get executed.\n *\n * #### Options\n * Options can be passed as a second argument. If `failsafe: true` is\n * passed, the command is allowed to fail (i.e. exiting with a non-zero\n * exit code), whereas `silent: true` will simply suppress its output.\n *\n * ```javascript\n * // output of `ls -al` is suppressed\n * transport.ls('-al', {silent: true});\n *\n * // flightplan continues even if command fails with exit code `1`\n * transport.ls('-al foo', {failsafe: true}); // ls: foo: No such file or directory\n *\n * // both options together\n * transport.ls('-al foo', {silent: true, failsafe: true});\n * ```\n *\n * To apply these options to multiple commands check out the docs of\n * `transport.silent()` and `transport.failsafe()`.\n *\n * #### Return value\n * Each command returns an object containing `code`, `stdout` and`stderr`:\n *\n * ```javascript\n * var result = transport.echo('Hello world');\n * console.log(result); // { code: 0, stdout: 'Hello world\\n', stderr: null }\n * ```\n *\n * #### Advanced options\n * Flightplan uses `child_process#exec()` for executing local commands and\n * `mscdex/ssh2#exec()` for remote commands. Options passed with `exec` will\n * be forwarded to either of these functions.\n *\n * ```javascript\n * // increase maxBuffer for child_process#exec()\n * local.ls('-al', {exec: {maxBuffer: 2000*1024}});\n *\n * // enable pty for mscdex/ssh2#exec()\n * remote.ls('-al', {exec: {pty: true}});\n * ```\n *\n * @method exec(command[, options])\n * @return {Object} code: int, stdout: String, stderr: String\n */\nTransport.prototype.exec = function(command, options) {\n  command = command || '';\n  options = options || {};\n\n  return this._exec(format('%s%s', this._execWith, command), options);\n};\n\n/**\n * Execute a command as another user with `sudo()`. It has the same\n * signature as `exec()`. Per default, the user under which the command\n * will be executed is \"root\". This can be changed by passing\n * `user: \"name\"` with the second argument:\n *\n * ```javascript\n * // will run: echo 'echo Hello world' | sudo -u root -i bash\n * transport.sudo('echo Hello world');\n *\n * // will run echo 'echo Hello world' | sudo -u www -i bash\n * transport.sudo('echo Hello world', {user: 'www'});\n *\n * // further options passed (see `exec()`)\n * transport.sudo('echo Hello world', {user: 'www', silent: true, failsafe: true});\n * ```\n *\n * Flightplan's `sudo()` requires a certain setup on your host. In order to\n * make things work on a typical Ubuntu installation, follow these rules:\n *\n * ```bash\n * # Scenario:\n * # 'pstadler' is the user for connecting to the host and 'www' is the user\n * # under which you want to execute commands with sudo.\n *\n * # 1. 'pstadler' has to be in the sudo group:\n * $ groups pstadler\n * pstadler : pstadler sudo\n *\n * # 2. 'pstadler' needs to be able to run sudo -u 'www' without a password.\n * # In order to do this, add the following line to /etc/sudoers:\n * pstadler ALL=(www) NOPASSWD: ALL\n *\n * # 3. user 'www' needs to have a login shell (e.g. bash, sh, zsh, ...)\n * $ cat /etc/passwd | grep www\n * www:x:1002:1002::/home/www:/bin/bash   # GOOD\n * www:x:1002:1002::/home/www:/bin/false  # BAD\n * ```\n *\n * @method sudo(command[, options])\n * @return {Object} code: int, stdout: String, stderr: String\n */\nTransport.prototype.sudo = function(command, options) {\n  command = command || '';\n  options = options || {};\n\n  var user = options.user || 'root';\n\n  command = format('%s%s', this._execWith, command);\n  command = escapeSingleQuotes(command);\n  command = format(\"echo '%s' | sudo -u %s -i bash\", command, user);\n\n  return this._exec(command, options);\n};\n\n/**\n * Copy a list of files to the current target's remote host(s) using\n * `rsync` with the SSH protocol. File transfers are executed in parallel.\n *  After finishing all transfers, an array containing results from\n * `transport.exec()` is returned. This method is only available on local\n * flights.\n *\n * ```javascript\n * var files = ['path/to/file1', 'path/to/file2'];\n * local.transfer(files, '/tmp/foo');\n * ```\n *\n * #### Files argument\n * To make things more comfortable, the `files` argument doesn't have to be\n * passed as an array. Results from previous commands and zero-terminated\n * strings are handled as well:\n *\n * ```javascript\n * // use result from a previous command\n * var files = local.git('ls-files', {silent: true}); // get list of files under version control\n * local.transfer(files, '/tmp/foo');\n *\n * // use zero-terminated result from a previous command\n * var files = local.exec('(git ls-files -z;find node_modules -type f -print0)', {silent: true});\n * local.transfer(files, '/tmp/foo');\n *\n * // use results from multiple commands\n * var result1 = local.git('ls-files', {silent: true}).stdout.split('\\n');\n * var result2 = local.find('node_modules -type f', {silent: true}).stdout.split('\\n');\n * var files = result1.concat(result2);\n * files.push('path/to/another/file');\n * local.transfer(files, '/tmp/foo');\n * ```\n *\n * `transfer()` will use the current host's username defined with\n * `target()` unless `fly` is called with the `-u|--username` option.\n * In this case the latter will be used. If debugging is enabled\n * (either with `target()` or with `fly --debug`), `rsync` is executed\n * in verbose mode (`-vv`).\n *\n * @method transfer(files, remoteDir[, options])\n * @return {Array} [results]\n */\nTransport.prototype.transfer = function() {\n  throw new Error('This transport does not implement `transfer(files, remoteDir, options)`');\n};\n\n/**\n * Prompt for user input.\n *\n * ```javascript\n * var input = transport.prompt('Are you sure you want to continue? [yes]');\n * if(input.indexOf('yes') === -1) {\n *   plan.abort('User canceled flight');\n * }\n *\n * // prompt for password (with UNIX-style hidden input)\n * var password = transport.prompt('Enter your password:', { hidden: true });\n *\n * // prompt when deploying to a specific target\n * if(plan.runtime.target === 'production') {\n *   var input = transport.prompt('Ready for deploying to production? [yes]');\n *   if(input.indexOf('yes') === -1) {\n *     plan.abort('User canceled flight');\n *   }\n * }\n * ```\n *\n * @method prompt(message[, options])\n * @return {String} input\n */\nvar promptQueue = queue();\n\nTransport.prototype.prompt = function(message, options) {\n  options = options || {};\n\n  var prefix = this._context.remote.host;\n\n  return this.waitFor(function(done) {\n    promptQueue.push(function() {\n      prompt.colors = false;\n      prompt.delimiter = '';\n      prompt.message = chalk.gray(prefix) + ' * ';\n      prompt.start();\n\n      prompt.get({\n        name: 'input',\n        description: chalk.blue(message),\n        hidden: options.hidden || false,\n        required: options.required || false\n      }, function(err, result) {\n        if(err) {\n          throw new errors.ProcessInterruptedError('User canceled prompt');\n        }\n\n        promptQueue.done(function() {\n          done(result ? result.input : null);\n        });\n      });\n    });\n\n    promptQueue.next();\n  });\n};\n\n/**\n * Execute a function and return after the callback `done` is called.\n * This is used for running asynchronous functions in a synchronous way.\n *\n * The callback takes an optional argument which is then returned by\n * `waitFor()`.\n *\n * ```javascript\n * var result = transport.waitFor(function(done) {\n *   require('node-notifier').notify({\n *       message: 'Hello World'\n *     }, function(err, response) {\n *       done(err || 'sent!');\n *     });\n * });\n * console.log(result); // 'sent!'\n * ```\n *\n * @method waitFor(fn(done))\n * @return {} mixed\n */\nTransport.prototype.waitFor = function(fn) {\n  function task() {\n    var future = new Future();\n\n    fn(function(result) {\n      future.return(result);\n    });\n\n    return future;\n  }\n\n  return task().wait();\n};\n\n/**\n * Execute commands with a certain context.\n *\n * ```javascript\n * transport.with('cd /tmp', function() {\n *   transport.ls('-al'); // 'cd /tmp && ls -al'\n * });\n *\n * transport.with({silent: true, failsafe: true}, function() {\n *   transport.ls('-al'); // output suppressed, fail safely\n * });\n *\n * transport.with('cd /tmp', {silent: true}, function() {\n *   transport.ls('-al'); // 'cd /tmp && ls -al', output suppressed\n * });\n * ```\n *\n * @method with(command|options[, options], fn)\n */\nTransport.prototype.with = function() {\n  var previousExecWith = this._execWith;\n  var previousOptions = extend({}, this._options); // clone\n\n  var args = Array.prototype.slice.call(arguments, 0);\n\n  for(var i in args) {\n    if(typeof args[i] === 'string') {\n      this._execWith += args[i] + ' && ';\n    } else if(typeof args[i] === 'object') {\n      this._options = extend(this._options, args[i]);\n    } else if(typeof args[i] === 'function') {\n      args[i]();\n    }\n  }\n\n  this._execWith = previousExecWith;\n  this._options = previousOptions;\n};\n\n/**\n * When calling `silent()` all subsequent commands are executed without\n * printing their output to stdout until `verbose()` is called.\n *\n * ```javascript\n * transport.ls(); // output will be printed to stdout\n * transport.silent();\n * transport.ls(); // output won't be printed to stdout\n * ```\n *\n * @method silent()\n */\nTransport.prototype.silent = function() {\n  this._options.silent = true;\n};\n\n/**\n * Calling `verbose()` reverts the behavior introduced with `silent()`.\n * Output of commands will be printed to stdout.\n *\n * ```javascript\n * transport.silent();\n * transport.ls(); // output won't be printed to stdout\n * transport.verbose();\n * transport.ls(); // output will be printed to stdout\n * ```\n *\n * @method verbose()\n */\nTransport.prototype.verbose = function() {\n  this._options.silent = false;\n};\n\n/**\n * When calling `failsafe()`, all subsequent commands are allowed to fail\n * until `unsafe()` is called. In other words, the flight will continue\n * even if the return code of the command is not `0`. This is helpful if\n * either you expect a command to fail or their nature is to return a\n * non-zero exit code.\n *\n * ```javascript\n * transport.failsafe();\n * transport.ls('foo'); // ls: foo: No such file or directory\n * transport.log('Previous command failed, but flight was not aborted');\n * ```\n *\n * @method failsafe()\n */\nTransport.prototype.failsafe = function() {\n  this._options.failsafe = true;\n};\n\n/**\n * Calling `unsafe()` reverts the behavior introduced with `failsafe()`.\n * The flight will be aborted if a subsequent command fails (i.e. returns\n * a non-zero exit code). This is the default behavior.\n *\n * ```javascript\n * transport.failsafe();\n * transport.ls('foo'); // ls: foo: No such file or directory\n * transport.log('Previous command failed, but flight was not aborted');\n * transport.unsafe();\n * transport.ls('foo'); // ls: foo: No such file or directory\n * // flight aborted\n * ```\n *\n * @method unsafe()\n */\nTransport.prototype.unsafe = function() {\n  this._options.failsafe = false;\n};\n\n/**\n * Print a message to stdout. Flightplan takes care that the message\n * is formatted correctly within the current context.\n *\n * ```javascript\n * transport.log('Copying files to remote hosts');\n * ```\n *\n * @method log(message)\n */\nTransport.prototype.log = function(message) {\n  this._logger.user(message);\n};\n\n/**\n * Print a debug message to stdout if debug mode is enabled. Flightplan\n * takes care that the message is formatted correctly within the current\n * context.\n *\n * ```javascript\n * transport.debug('Copying files to remote hosts');\n * ```\n *\n * @method debug(message)\n */\nTransport.prototype.debug = function(message) {\n  this._logger.debug(message);\n};\n\nTransport.prototype.close = function() {};\n\nmodule.exports = Transport;\n","/home/travis/build/npmtest/node-npmtest-flightplan/node_modules/flightplan/lib/transport/commands.js":"var common = [\n  'awk',\n  'cat',\n  'cd',\n  'chgrp',\n  'chmod',\n  'chown',\n  'cp',\n  'echo',\n  'find',\n  'ftp',\n  'grep',\n  'groups',\n  'hostname',\n  'kill',\n  'ln',\n  'ls',\n  'mkdir',\n  'mv',\n  'ps',\n  'pwd',\n  'rm',\n  'rmdir',\n  'scp',\n  'sed',\n  'tail',\n  'tar',\n  'touch',\n  'unzip',\n  'whoami',\n  'zip'\n];\n\nvar extra = [\n  'git',\n  'hg',\n  'node',\n  'npm',\n  'rsync',\n  'svn'\n];\n\nmodule.exports = common.concat(extra);","/home/travis/build/npmtest/node-npmtest-flightplan/node_modules/flightplan/lib/utils/queue.js":"module.exports = function() {\n  var queue = {}\n    , items = []\n    , doneCallbacks = []\n    , isRunning = false;\n\n  queue.push = function(fn) {\n    items.push(fn);\n  };\n\n  queue.next = function() {\n    if(isRunning || items.length === 0) {\n      return;\n    }\n\n    isRunning = true;\n\n    var fn = items.shift();\n    fn();\n  };\n\n  queue.done = function(callback) {\n    if(callback) {\n      doneCallbacks.push(callback);\n    }\n\n    isRunning = false;\n\n    if(items.length === 0) {\n      queue.end();\n\n      return;\n    }\n\n    queue.next();\n  };\n\n  queue.end = function() {\n    doneCallbacks.forEach(function(cb) {\n      cb();\n    });\n\n    doneCallbacks = [];\n  };\n\n  return queue;\n};\n","/home/travis/build/npmtest/node-npmtest-flightplan/node_modules/flightplan/lib/flight/remote.js":"var Fiber = require('fibers')\n  , Future = require('fibers/future')\n  , extend = require('util-extend')\n  , SSH = require('../transport/ssh')\n  , logger = require('../logger')()\n  , prettyTime = require('pretty-hrtime')\n  , errors = require('../errors');\n\nvar _connections = [];\n\nfunction connect(_context) {\n  var future = new Future();\n\n  new Fiber(function() {\n    logger.info(\"Connecting to '\" + _context.remote.host + \"'\");\n\n    try {\n      var connection = new SSH(_context);\n      _connections.push(connection);\n    } catch(e) {\n      if(!_context.remote.failsafe) {\n        throw new errors.ConnectionFailedError(\"Error connecting to '\" +\n                              _context.remote.host + \"': \" + e.message);\n      }\n\n      logger.warn(\"Safely failed connecting to '\" +\n                    _context.remote.host + \"': \" + e.message);\n    }\n\n    return future.return();\n  }).run();\n\n  return future;\n}\n\nfunction execute(transport, fn) {\n  var future = new Future();\n\n  new Fiber(function() {\n    var t = process.hrtime();\n\n    logger.info('Executing remote task on ' + transport.runtime.host);\n\n    fn(transport);\n\n    logger.info('Remote task on ' + transport.runtime.host +\n                ' finished after ' + prettyTime(process.hrtime(t)));\n\n    return future.return();\n  }).run();\n\n  return future;\n}\n\nexports.run = function(fn, context) {\n  if(_connections.length === 0) {\n    Future.wait(context.hosts.map(function(host) {\n      var _context = extend({}, context);\n      _context.remote = host;\n\n      return connect(_context);\n    }));\n  }\n\n  Future.wait(_connections.map(function(connection) {\n    return execute(connection, fn);\n  }));\n};\n\nexports.disconnect = function() {\n  _connections.forEach(function(connection) {\n    connection.close();\n  });\n\n  _connections = [];\n};","/home/travis/build/npmtest/node-npmtest-flightplan/node_modules/flightplan/lib/transport/ssh.js":"var util = require('util')\n  , extend = require('util-extend')\n  , Fiber = require('fibers')\n  , Connection = require('ssh2').Client\n  , byline = require('byline')\n  , Transport = require('./index')\n  , errors = require('../errors')\n  , fs = require('fs');\n\nfunction SSH(context) {\n  SSH.super_.call(this, context);\n\n  var config = extend({}, context.remote); // clone\n\n  if(config.tryKeyboard !== false) {\n    config.tryKeyboard = true;\n    config.readyTimeout = config.readyTimeout || 30000;\n  }\n\n  if(config.privateKey) {\n    config.privateKey = fs.readFileSync(config.privateKey, { encoding: 'utf8' });\n  }\n\n  var self = this;\n\n  var fiber = Fiber.current;\n\n  this._connection = new Connection();\n\n  this._connection.on('keyboard-interactive', function next(name, instructions,\n                                    instructionsLang, prompts, finish, answers) {\n    answers = answers || [];\n\n    var currentPrompt = prompts[answers.length];\n\n    if(answers.length < prompts.length) {\n      new Fiber(function() {\n        var answer = self.prompt(currentPrompt.prompt, { hidden: !currentPrompt.echo });\n        answers.push(answer);\n\n        next(name, instructions, instructionsLang, prompts, finish, answers);\n      }).run();\n    } else {\n      finish(answers);\n    }\n  });\n\n  this._connection.on('ready', function() {\n    fiber.run();\n  });\n\n  this._connection.on('error', function(err) {\n    return fiber.throwInto(err);\n  });\n\n  this._connection.connect(config);\n\n  return Fiber.yield();\n}\nutil.inherits(SSH, Transport);\n\nSSH.prototype._exec = function(command, options) {\n  options = options || {};\n\n  var self = this;\n\n  options = extend(extend({}, self._options), options); // clone and extend\n\n  var result = {\n    code: 0,\n    stdout: null,\n    stderr: null\n  };\n\n  self._logger.command(command);\n\n  var fiber = Fiber.current;\n\n  self._connection.exec(command, options.exec || {}, function(err, stream) {\n\n    stream.on('data', function(data) {\n      result.stdout = (result.stdout || '') + data;\n    });\n\n    stream.stderr.on('data', function(data) {\n      result.stderr = (result.stderr || '') + data;\n    });\n\n    byline(stream, { keepEmptyLines: true }).on('data', function(data) {\n      if(!options.silent) {\n        self._logger.stdout(data);\n      }\n    });\n\n    byline(stream.stderr, { keepEmptyLines: true }).on('data', function(data) {\n      self._logger[options.failsafe ? 'stdwarn' : 'stderr'](data);\n    });\n\n    stream.on('exit', function(code) {\n      result.code = code;\n    });\n\n    stream.on('end', function() {\n      if(result.code === 0) {\n        self._logger.success('ok');\n      } else if(options.failsafe) {\n        self._logger.warn('failed safely (' + result.code + ')');\n      } else {\n        self._logger.error('failed (' + result.code + ')');\n\n        var error = new errors.CommandExitedAbnormallyError(\n                  'Command exited abnormally on ' + self._context.remote.host);\n\n        return fiber.throwInto(error);\n      }\n\n      fiber.run(result);\n    });\n  });\n\n  return Fiber.yield();\n};\n\nSSH.prototype.close = function() {\n  this._connection.end();\n};\n\nmodule.exports = SSH;\n"}